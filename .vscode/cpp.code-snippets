{
	// Place your algo-beginner-vscode workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	"for": {
		"prefix": ["for", "forx"],
		"scope": "c,cpp",
		"description": "[algoUX] Snippet for for loop",
		"body": [
			"for (int ${1:i} = 0; ${1:i} < ${2:count}; ${3:++${1:i}}) {",
			"    ${0:/* code */}",
			"}"
		]
	},
	"while": {
		"prefix": ["while", "whilex"],
		"scope": "c,cpp",
		"description": "[algoUX] while loop",
		"body": [
			"while (${1:/* condition */}) {",
			"    ${2:/* code */}",
			"}",
			"${0}"
		]
	},
	"do while": {
		"prefix": ["do", "dox"],
		"scope": "c,cpp",
		"description": "[algoUX] Snippet for do while loop",
		"body": [
			"do {",
			"    ${2:/* code */}",
			"} while (${1:/* condition */});",
			"${0}"
		]
	},
	"switch": {
		"prefix": ["switch", "switchx"],
		"scope": "c,cpp",
		"description": "[algoUX] Snippet for switch",
		"body": [
			"switch (${1:expression}) {",
			"    case ${2:/* constant-expression */}:",
			"        ${3:/* code */}",
			"        break;",
			"    default:",
			"        break;",
			"}${0}"
		]
	},
	"try catch": {
		"prefix": ["try", "tryx"],
		"scope": "c,cpp",
		"description": "[algoUX] Snippet for try catch block",
		"body": [
			"try {",
			"    ${1:/* code */}",
			"} catch (${2:const std::exception& e}) {",
			"    ${0:std::cerr << e.what() << '\\n';}",
			"}"
		]
	},
	"main": {
		"prefix": ["main", "mainx"],
		"scope": "c,cpp",
		"description": "[algoUX] Snippet for main()",
		"body": [
			"int main(int argc, char const *argv[]) {",
			"    ${0:/* code */}",
			"",
  		"    return 0;",
			"}",
			""
		]
	},
	"acinit c": {
		"prefix": "acinit",
		"scope": "c",
		"description": "[algoUX] Snippet for C file template",
		"body": [
			"#include <math.h>",
			"#include <stdbool.h>",
			"#include <stdio.h>",
			"#include <stdlib.h>",
			"#include <string.h>",
			"",
			"int main(int argc, char const *argv[]) {",
			"    ${0:/* code */}",
			"",
			"    return 0;",
			"}",
			""
		]
	},
	"acinit c++": {
		"prefix": "acinit",
		"scope": "cpp",
		"description": "[algoUX] Snippet for C++ file template",
		"body": [
			"#include <algorithm>",
			"#include <bitset>",
			"#include <cmath>",
			"#include <cstdio>",
			"#include <cstdlib>",
			"#include <cstring>",
			"#include <deque>",
			"#include <functional>",
			"#include <map>",
			"#include <queue>",
			"#include <set>",
			"#include <stack>",
			"#include <string>",
			"#include <vector>",
			"using namespace std;",
			"",
			"int main(int argc, char const *argv[]) {",
			"    ${0:/* code */}",
			"",
  		"    return 0;",
			"}",
			""
		]
	}
}